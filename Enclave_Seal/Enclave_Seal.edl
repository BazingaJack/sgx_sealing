enclave {
    include "sgx_report.h"
    include "stdbool.h"
    include "/root/sgx-gmp-lib/include/sgx_tgmp.h"
    from "sgx_tstdc.edl" import *;
    from "sgx_dcap_tvl.edl" import *;

    trusted {
        /* define ECALLs here. */
		public uint32_t get_sealed_data_size([in] size_t* aad_mac_text_len,
                                             [in] size_t* encrypt_data_len);
		public sgx_status_t seal_data([in, size=aad_mac_text_len] uint8_t* p_aad_mac_text, size_t aad_mac_text_len,
                                      [in, size=encrypt_data_len] uint8_t* p_encrypt_data, size_t encrypt_data_len,
                                      [out, size=data_size] uint8_t* sealed_blob, uint32_t data_size);
        public sgx_status_t generate_aes_key_and_seal([out, size=key_size] uint8_t* p_aes_key, uint32_t key_size);
        public sgx_status_t generate_rsa_key_and_seal([out, size=384] unsigned char* p_n,
                                                      [out, size=384] unsigned char* p_d,
                                                      [out, size=192] unsigned char* p_p,
                                                      [out, size=192] unsigned char* p_q,
                                                      [out, size=192] unsigned char* p_dmp1,
                                                      [out, size=192] unsigned char* p_dmq1,
                                                      [out, size=192] unsigned char* p_iqmp);
        public sgx_status_t encrypt_by_rsa_pubkey([in,size=384] unsigned char* p_n,
                                                  [in, size=data_size] unsigned char* p_data, size_t data_size,
                                                  [out,size=encrypt_data_size] unsigned char* p_encrypt_data, size_t encrypt_data_size);
        public void get_unsealed_data_size([in, size=data_size] const uint8_t *sealed_blob, size_t data_size,
                                           [out] uint32_t *p_mac_text_len,
                                           [out] uint32_t *p_decrypt_data_len);
		public sgx_status_t unseal_data([in, size=data_size] const uint8_t *sealed_blob, size_t data_size,
                                        [out, size=mac_data_size] uint8_t *p_mac_text, size_t mac_data_size,
                                        [out, size=decrypt_data_size] uint8_t *p_decrypt_data, size_t decrypt_data_size);
        public sgx_status_t decrypt_by_rsa_prikey([in,size=192] unsigned char* p_p,
                                                  [in,size=192] unsigned char* p_q,
                                                  [in,size=192] unsigned char* p_dmp1,
                                                  [in,size=192] unsigned char* p_dmq1,
                                                  [in,size=192] unsigned char* p_iqmp,
                                                  [in, size=data_size] uint8_t* p_data, size_t data_size,
                                                  [out, size=decrypt_data_size] uint8_t* p_decrypt_data, size_t decrypt_data_size);
        public sgx_status_t sign_data_with_rsa([in,size=384] unsigned char* p_n,
                                               [in,size=384] unsigned char* p_d,
                                               [in, size=data_len] uint8_t* p_data, size_t data_len,
                                               [out, size=384] uint8_t* p_sig);
        public sgx_status_t verify_signature_with_rsa([in,size=384] unsigned char* p_n,
                                                      [in, size=data_len] uint8_t* p_data, size_t data_len,
                                                      [in, size=384] uint8_t* p_sig,
                                                      [out,size=1] uint8_t* is_valid);
        public void forge([in] mpz_t* s,[in] mpz_t* q,[in] mpz_t* t,
                          [in] mpz_t* r,[in] mpz_t* t_new,[out] mpz_t* r_new);
        public uint32_t enclave_create_report([in]const sgx_target_info_t* p_qe3_target,
                                              [out]sgx_report_t* p_report);
        public sgx_status_t ecall_get_target_info([out] sgx_target_info_t* target_info);
        public bool generate_encrypt_and_report([in]sgx_target_info_t* p_qe_target_info,
                                                [out,size=encrypted_p_len] unsigned char* encrypted_p, size_t encrypted_p_len,
                                                [out,size=encrypted_q_len] unsigned char* encrypted_q, size_t encrypted_q_len,
                                                [out,size=encrypted_dmp1_len] unsigned char* encrypted_dmp1, size_t encrypted_dmp1_len,
                                                [out,size=encrypted_dmq1_len] unsigned char* encrypted_dmq1, size_t encrypted_dmq1_len,
                                                [out,size=encrypted_iqmp_len] unsigned char* encrypted_iqmp, size_t encrypted_iqmp_len,
                                                [out]sgx_report_t* p_report);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print_string([in, string] const char* str);
        void ocall_print_num([in] uint32_t* num);
        void ocall_print_mpz([in] mpz_t* num);
    };
};